package com.evertvd.bienes.modelo;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.evertvd.bienes.modelo.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.evertvd.bienes.modelo.dao.CatalogoDao;
import com.evertvd.bienes.modelo.dao.DepartamentoDao;
import com.evertvd.bienes.modelo.dao.EmpresaDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "EMPRESA".
 */
@Entity(active = true)
public class Empresa {

    @Id(autoincrement = true)
    private Long id;
    private String empresa;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient EmpresaDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "empresa_id")
    })
    private List<Departamento> departamentoList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "empresa_id2")
    })
    private List<Catalogo> catalogoList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Empresa() {
    }

    public Empresa(Long id) {
        this.id = id;
    }

    @Generated
    public Empresa(Long id, String empresa) {
        this.id = id;
        this.empresa = empresa;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEmpresaDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getEmpresa() {
        return empresa;
    }

    public void setEmpresa(String empresa) {
        this.empresa = empresa;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Departamento> getDepartamentoList() {
        if (departamentoList == null) {
            __throwIfDetached();
            DepartamentoDao targetDao = daoSession.getDepartamentoDao();
            List<Departamento> departamentoListNew = targetDao._queryEmpresa_DepartamentoList(id);
            synchronized (this) {
                if(departamentoList == null) {
                    departamentoList = departamentoListNew;
                }
            }
        }
        return departamentoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetDepartamentoList() {
        departamentoList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Catalogo> getCatalogoList() {
        if (catalogoList == null) {
            __throwIfDetached();
            CatalogoDao targetDao = daoSession.getCatalogoDao();
            List<Catalogo> catalogoListNew = targetDao._queryEmpresa_CatalogoList(id);
            synchronized (this) {
                if(catalogoList == null) {
                    catalogoList = catalogoListNew;
                }
            }
        }
        return catalogoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetCatalogoList() {
        catalogoList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
