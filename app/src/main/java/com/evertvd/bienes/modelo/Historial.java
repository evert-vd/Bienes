package com.evertvd.bienes.modelo;

import org.greenrobot.greendao.annotation.*;

import com.evertvd.bienes.modelo.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.evertvd.bienes.modelo.dao.ActivoDao;
import com.evertvd.bienes.modelo.dao.HistorialDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "HISTORIAL".
 */
@Entity(active = true)
public class Historial {

    @Id(autoincrement = true)
    private Long id;
    private String campo_modificado;
    private String fecha_modificacion;

    @Index
    private Long activo_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient HistorialDao myDao;

    @ToOne(joinProperty = "activo_id")
    private Activo activo;

    @Generated
    private transient Long activo__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Historial() {
    }

    public Historial(Long id) {
        this.id = id;
    }

    @Generated
    public Historial(Long id, String campo_modificado, String fecha_modificacion, Long activo_id) {
        this.id = id;
        this.campo_modificado = campo_modificado;
        this.fecha_modificacion = fecha_modificacion;
        this.activo_id = activo_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHistorialDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCampo_modificado() {
        return campo_modificado;
    }

    public void setCampo_modificado(String campo_modificado) {
        this.campo_modificado = campo_modificado;
    }

    public String getFecha_modificacion() {
        return fecha_modificacion;
    }

    public void setFecha_modificacion(String fecha_modificacion) {
        this.fecha_modificacion = fecha_modificacion;
    }

    public Long getActivo_id() {
        return activo_id;
    }

    public void setActivo_id(Long activo_id) {
        this.activo_id = activo_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Activo getActivo() {
        Long __key = this.activo_id;
        if (activo__resolvedKey == null || !activo__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ActivoDao targetDao = daoSession.getActivoDao();
            Activo activoNew = targetDao.load(__key);
            synchronized (this) {
                activo = activoNew;
            	activo__resolvedKey = __key;
            }
        }
        return activo;
    }

    @Generated
    public void setActivo(Activo activo) {
        synchronized (this) {
            this.activo = activo;
            activo_id = activo == null ? null : activo.getId();
            activo__resolvedKey = activo_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
