package com.evertvd.bienes.modelo;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.evertvd.bienes.modelo.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.evertvd.bienes.modelo.dao.ActivoDao;
import com.evertvd.bienes.modelo.dao.SedeDao;
import com.evertvd.bienes.modelo.dao.UbicacionDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "UBICACION".
 */
@Entity(active = true)
public class Ubicacion {

    @Id(autoincrement = true)
    private Long id;
    private String ubicacion;

    @Index
    private Long sede_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient UbicacionDao myDao;

    @ToOne(joinProperty = "sede_id")
    private Sede sede;

    @Generated
    private transient Long sede__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "ubicacion_id")
    })
    private List<Activo> activoList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Ubicacion() {
    }

    public Ubicacion(Long id) {
        this.id = id;
    }

    @Generated
    public Ubicacion(Long id, String ubicacion, Long sede_id) {
        this.id = id;
        this.ubicacion = ubicacion;
        this.sede_id = sede_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUbicacionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUbicacion() {
        return ubicacion;
    }

    public void setUbicacion(String ubicacion) {
        this.ubicacion = ubicacion;
    }

    public Long getSede_id() {
        return sede_id;
    }

    public void setSede_id(Long sede_id) {
        this.sede_id = sede_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Sede getSede() {
        Long __key = this.sede_id;
        if (sede__resolvedKey == null || !sede__resolvedKey.equals(__key)) {
            __throwIfDetached();
            SedeDao targetDao = daoSession.getSedeDao();
            Sede sedeNew = targetDao.load(__key);
            synchronized (this) {
                sede = sedeNew;
            	sede__resolvedKey = __key;
            }
        }
        return sede;
    }

    @Generated
    public void setSede(Sede sede) {
        synchronized (this) {
            this.sede = sede;
            sede_id = sede == null ? null : sede.getId();
            sede__resolvedKey = sede_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Activo> getActivoList() {
        if (activoList == null) {
            __throwIfDetached();
            ActivoDao targetDao = daoSession.getActivoDao();
            List<Activo> activoListNew = targetDao._queryUbicacion_ActivoList(id);
            synchronized (this) {
                if(activoList == null) {
                    activoList = activoListNew;
                }
            }
        }
        return activoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetActivoList() {
        activoList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
