package com.evertvd.bienes.modelo;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.evertvd.bienes.modelo.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import com.evertvd.bienes.modelo.dao.DepartamentoDao;
import com.evertvd.bienes.modelo.dao.SedeDao;
import com.evertvd.bienes.modelo.dao.UbicacionDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "SEDE".
 */
@Entity(active = true)
public class Sede {

    @Id(autoincrement = true)
    private Long id;
    private String sede;

    @Index
    private Long departamento_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient SedeDao myDao;

    @ToOne(joinProperty = "departamento_id")
    private Departamento departamento;

    @Generated
    private transient Long departamento__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "sede_id")
    })
    private List<Ubicacion> ubicacionList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Sede() {
    }

    public Sede(Long id) {
        this.id = id;
    }

    @Generated
    public Sede(Long id, String sede, Long departamento_id) {
        this.id = id;
        this.sede = sede;
        this.departamento_id = departamento_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSedeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSede() {
        return sede;
    }

    public void setSede(String sede) {
        this.sede = sede;
    }

    public Long getDepartamento_id() {
        return departamento_id;
    }

    public void setDepartamento_id(Long departamento_id) {
        this.departamento_id = departamento_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Departamento getDepartamento() {
        Long __key = this.departamento_id;
        if (departamento__resolvedKey == null || !departamento__resolvedKey.equals(__key)) {
            __throwIfDetached();
            DepartamentoDao targetDao = daoSession.getDepartamentoDao();
            Departamento departamentoNew = targetDao.load(__key);
            synchronized (this) {
                departamento = departamentoNew;
            	departamento__resolvedKey = __key;
            }
        }
        return departamento;
    }

    @Generated
    public void setDepartamento(Departamento departamento) {
        synchronized (this) {
            this.departamento = departamento;
            departamento_id = departamento == null ? null : departamento.getId();
            departamento__resolvedKey = departamento_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Ubicacion> getUbicacionList() {
        if (ubicacionList == null) {
            __throwIfDetached();
            UbicacionDao targetDao = daoSession.getUbicacionDao();
            List<Ubicacion> ubicacionListNew = targetDao._querySede_UbicacionList(id);
            synchronized (this) {
                if(ubicacionList == null) {
                    ubicacionList = ubicacionListNew;
                }
            }
        }
        return ubicacionList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetUbicacionList() {
        ubicacionList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
